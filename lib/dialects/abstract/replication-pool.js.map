{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/replication-pool.ts"],
  "sourcesContent": ["import { Pool } from 'sequelize-pool';\r\nimport type { NormalizedPoolOptions, ConnectionOptions } from '../../sequelize.js';\r\nimport { logger } from '../../utils/logger.js';\r\n\r\nconst debug = logger.debugContext('pool');\r\n\r\nexport type ConnectionType = 'read' | 'write';\r\n\r\ntype ReplicationPoolConfig<Resource> = {\r\n  readConfig: ConnectionOptions[] | null,\r\n  writeConfig: ConnectionOptions,\r\n  pool: Omit<NormalizedPoolOptions, 'validate'>,\r\n\r\n  connect(options: ConnectionOptions): Promise<Resource>,\r\n  disconnect(connection: Resource): Promise<void>,\r\n  validate(connection: Resource): boolean,\r\n};\r\n\r\nconst OwningPool = Symbol('owning-pool');\r\n\r\nexport class ReplicationPool<Resource extends object> {\r\n  /**\r\n   * Replication read pool. Will only be used if the 'read' replication option has been provided,\r\n   * otherwise the {@link write} will be used instead.\r\n   */\r\n  readonly read: Pool<Resource> | null;\r\n  readonly write: Pool<Resource>;\r\n\r\n  constructor(config: ReplicationPoolConfig<Resource>) {\r\n    const { connect, disconnect, validate, readConfig, writeConfig } = config;\r\n\r\n    if (!readConfig || readConfig.length === 0) {\r\n      // no replication, the write pool will always be used instead\r\n      this.read = null;\r\n    } else {\r\n      let reads = 0;\r\n\r\n      this.read = new Pool({\r\n        name: 'sequelize:read',\r\n        create: async () => {\r\n          // round robin config\r\n          const nextRead = reads++ % readConfig.length;\r\n          const connection = await connect(readConfig[nextRead]);\r\n\r\n          Reflect.set(connection, OwningPool, 'read');\r\n\r\n          return connection;\r\n        },\r\n        destroy: disconnect,\r\n        validate,\r\n        max: config.pool.max,\r\n        min: config.pool.min,\r\n        acquireTimeoutMillis: config.pool.acquire,\r\n        idleTimeoutMillis: config.pool.idle,\r\n        reapIntervalMillis: config.pool.evict,\r\n        maxUses: config.pool.maxUses,\r\n      });\r\n    }\r\n\r\n    this.write = new Pool({\r\n      name: 'sequelize:write',\r\n      create: async () => {\r\n        const connection = await connect(writeConfig);\r\n\r\n        Reflect.set(connection, OwningPool, 'write');\r\n\r\n        return connection;\r\n      },\r\n      destroy: disconnect,\r\n      validate,\r\n      max: config.pool.max,\r\n      min: config.pool.min,\r\n      acquireTimeoutMillis: config.pool.acquire,\r\n      idleTimeoutMillis: config.pool.idle,\r\n      reapIntervalMillis: config.pool.evict,\r\n      maxUses: config.pool.maxUses,\r\n    });\r\n  }\r\n\r\n  async acquire(queryType: ConnectionType = 'write', useMaster = false) {\r\n    if (queryType !== 'read' && queryType !== 'write') {\r\n      throw new Error(`Expected queryType to be either read or write. Received ${queryType}`);\r\n    }\r\n\r\n    if (this.read != null && queryType === 'read' && !useMaster) {\r\n      return this.read.acquire();\r\n    }\r\n\r\n    return this.write.acquire();\r\n  }\r\n\r\n  release(client: Resource): void {\r\n    const connectionType = Reflect.get(client, OwningPool);\r\n\r\n    this.getPool(connectionType).release(client);\r\n  }\r\n\r\n  async destroy(client: Resource): Promise<void> {\r\n    const connectionType = Reflect.get(client, OwningPool);\r\n\r\n    await this.getPool(connectionType).destroy(client);\r\n    debug('connection destroy');\r\n  }\r\n\r\n  async destroyAllNow() {\r\n    await Promise.all([\r\n      this.read?.destroyAllNow(),\r\n      this.write.destroyAllNow(),\r\n    ]);\r\n\r\n    debug('all connections destroyed');\r\n  }\r\n\r\n  async drain() {\r\n    await Promise.all([\r\n      this.write.drain(),\r\n      this.read?.drain(),\r\n    ]);\r\n  }\r\n\r\n  getPool(poolType: ConnectionType): Pool<Resource> {\r\n    if (poolType === 'read' && this.read != null) {\r\n      return this.read;\r\n    }\r\n\r\n    return this.write;\r\n  }\r\n\r\n  get size(): number {\r\n    return (this.read?.size ?? 0) + this.write.size;\r\n  }\r\n\r\n  get available(): number {\r\n    return (this.read?.available ?? 0) + this.write.available;\r\n  }\r\n\r\n  get using(): number {\r\n    return (this.read?.using ?? 0) + this.write.using;\r\n  }\r\n\r\n  get waiting(): number {\r\n    return (this.read?.waiting ?? 0) + this.write.waiting;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
