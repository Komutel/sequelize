{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/connection-manager.ts"],
  "sourcesContent": ["import cloneDeep from 'lodash/cloneDeep';\r\nimport each from 'lodash/each';\r\nimport semver from 'semver';\r\nimport { TimeoutError } from 'sequelize-pool';\r\nimport { ConnectionAcquireTimeoutError } from '../../errors';\r\nimport type { Dialect, Sequelize, ConnectionOptions, QueryRawOptions } from '../../sequelize.js';\r\nimport * as deprecations from '../../utils/deprecations';\r\nimport { isNodeError } from '../../utils/index.js';\r\nimport { logger } from '../../utils/logger';\r\nimport { ReplicationPool } from './replication-pool.js';\r\nimport type { AbstractDialect } from './index.js';\r\n\r\nconst debug = logger.debugContext('connection-manager');\r\n\r\nexport interface GetConnectionOptions {\r\n  /**\r\n   * Set which replica to use. Available options are `read` and `write`\r\n   */\r\n  type: 'read' | 'write';\r\n\r\n  /**\r\n   * Force master or write replica to get connection from\r\n   */\r\n  useMaster?: boolean;\r\n\r\n  /**\r\n   * ID of the connection.\r\n   */\r\n  uuid?: string | 'default';\r\n}\r\n\r\nexport interface Connection {\r\n  uuid?: string | undefined;\r\n}\r\n\r\n/**\r\n * Abstract Connection Manager\r\n *\r\n * Connection manager which handles pooling & replication.\r\n * Uses sequelize-pool for pooling\r\n *\r\n * @param connection\r\n * @private\r\n */\r\nexport class AbstractConnectionManager<TConnection extends Connection = Connection> {\r\n  protected readonly sequelize: Sequelize;\r\n  protected readonly config: Sequelize['config'];\r\n  protected readonly dialect: AbstractDialect;\r\n  protected readonly dialectName: Dialect;\r\n  readonly pool: ReplicationPool<TConnection>;\r\n\r\n  #versionPromise: Promise<void> | null = null;\r\n\r\n  constructor(dialect: AbstractDialect, sequelize: Sequelize) {\r\n    const config: Sequelize['config'] = cloneDeep(sequelize.config);\r\n\r\n    this.sequelize = sequelize;\r\n    this.config = config;\r\n    this.dialect = dialect;\r\n    this.dialectName = this.sequelize.options.dialect;\r\n\r\n    // ===========================================================\r\n    // Init Pool\r\n    // ===========================================================\r\n\r\n    this.pool = new ReplicationPool<TConnection>({\r\n      ...config,\r\n      connect: async (options: ConnectionOptions): Promise<TConnection> => {\r\n        return this._connect(options);\r\n      },\r\n      disconnect: async (connection: TConnection): Promise<void> => {\r\n        return this._disconnect(connection);\r\n      },\r\n      validate: (connection: TConnection): boolean => {\r\n        if (config.pool.validate) {\r\n          return config.pool.validate(connection);\r\n        }\r\n\r\n        return this.validate(connection);\r\n      },\r\n      readConfig: config.replication.read,\r\n      writeConfig: config.replication.write,\r\n    });\r\n\r\n    if (config.replication.read.length > 0) {\r\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\r\n    } else {\r\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\r\n    }\r\n  }\r\n\r\n  // TODO: Update once we have DataTypes migrated to TS\r\n  refreshTypeParser(dataTypes: Record<string, any>) {\r\n    each(dataTypes, dataType => {\r\n      if (Object.prototype.hasOwnProperty.call(dataType, 'parse')) {\r\n        if (dataType.types[this.dialectName]) {\r\n          this._refreshTypeParser(dataType);\r\n        } else {\r\n          throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  _refreshTypeParser(_dataType: unknown): void {\r\n    throw new Error(`_refreshTypeParser not implemented in ${this.constructor.name}`);\r\n  }\r\n\r\n  /**\r\n   * Determine if a connection is still valid or not\r\n   *\r\n   * @param _connection\r\n   */\r\n  validate(_connection: TConnection): boolean {\r\n    return true;\r\n  }\r\n\r\n  async connect(_config: ConnectionOptions): Promise<TConnection> {\r\n    throw new Error(`connect not implemented in ${this.constructor.name}`);\r\n  }\r\n\r\n  async disconnect(_connection: TConnection): Promise<void> {\r\n    throw new Error(`disconnect not implemented in ${this.constructor.name}`);\r\n  }\r\n\r\n  /**\r\n   * Try to load dialect module from various configured options.\r\n   * Priority goes like dialectModulePath > dialectModule > require(default)\r\n   *\r\n   * @param moduleName Name of dialect module to lookup\r\n   *\r\n   * @private\r\n   */\r\n  _loadDialectModule(moduleName: string): unknown {\r\n    try {\r\n      if (this.sequelize.config.dialectModulePath) {\r\n        return require(this.sequelize.config.dialectModulePath);\r\n      }\r\n\r\n      if (this.sequelize.config.dialectModule) {\r\n        return this.sequelize.config.dialectModule;\r\n      }\r\n\r\n      return require(moduleName);\r\n    } catch (error) {\r\n      if (isNodeError(error) && error.code === 'MODULE_NOT_FOUND') {\r\n        if (this.sequelize.config.dialectModulePath) {\r\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\r\n        }\r\n\r\n        throw new Error(`Please install ${moduleName} package manually`);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler which executes on process exit or connection manager shutdown\r\n   */\r\n  async _onProcessExit() {\r\n    if (!this.pool) {\r\n      return;\r\n    }\r\n\r\n    await this.pool.drain();\r\n    debug('connection drain due to process exit');\r\n\r\n    await this.pool.destroyAllNow();\r\n  }\r\n\r\n  /**\r\n   * Drain the pool and close it permanently\r\n   */\r\n  async close() {\r\n    // Mark close of pool\r\n    this.getConnection = async function getConnection() {\r\n      throw new Error('ConnectionManager.getConnection was called after the connection manager was closed!');\r\n    };\r\n\r\n    return this._onProcessExit();\r\n  }\r\n\r\n  /**\r\n   * Get connection from pool. It sets database version if it's not already set.\r\n   * Call pool.acquire to get a connection.\r\n   *\r\n   * @param options\r\n   */\r\n  async getConnection(options?: GetConnectionOptions) {\r\n    await this.#initDatabaseVersion();\r\n\r\n    try {\r\n      const result = await this.pool.acquire(options?.type, options?.useMaster);\r\n\r\n      debug('connection acquired');\r\n\r\n      return result;\r\n    } catch (error) {\r\n      if (error instanceof TimeoutError) {\r\n        throw new ConnectionAcquireTimeoutError(error);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async #initDatabaseVersion() {\r\n    if (this.sequelize.options.databaseVersion !== 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.#versionPromise) {\r\n      await this.#versionPromise;\r\n\r\n      return;\r\n    }\r\n\r\n    // TODO: move to sequelize.queryRaw instead?\r\n    this.#versionPromise = (async () => {\r\n      try {\r\n        const connection = await this._connect(this.config.replication.write || this.config);\r\n\r\n        // connection might have set databaseVersion value at initialization,\r\n        // avoiding a useless round trip\r\n        const options: QueryRawOptions = {\r\n          logging: () => {},\r\n          // Cheat .query to use our private connection -- hack\r\n          // @ts-expect-error\r\n          transaction: { connection },\r\n        };\r\n\r\n        const version = await this.sequelize.databaseVersion(options);\r\n        const parsedVersion = semver.coerce(version)?.version || version;\r\n        this.sequelize.options.databaseVersion = semver.valid(parsedVersion)\r\n          ? parsedVersion\r\n          : this.dialect.defaultVersion;\r\n\r\n        if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {\r\n          deprecations.unsupportedEngine();\r\n          debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);\r\n        }\r\n\r\n        return await this._disconnect(connection);\r\n      } finally {\r\n        this.#versionPromise = null;\r\n      }\r\n    })();\r\n\r\n    await this.#versionPromise;\r\n  }\r\n\r\n  /**\r\n   * Release a pooled connection so it can be utilized by other connection requests\r\n   *\r\n   * @param connection\r\n   */\r\n  releaseConnection(connection: TConnection) {\r\n    this.pool.release(connection);\r\n    debug('connection released');\r\n  }\r\n\r\n  /**\r\n   * Destroys a pooled connection and removes it from the pool.\r\n   *\r\n   * @param connection\r\n   */\r\n  async destroyConnection(connection: TConnection) {\r\n    await this.pool.destroy(connection);\r\n    debug(`connection ${connection.uuid} destroyed`);\r\n  }\r\n\r\n  /**\r\n   * Call dialect library to get connection\r\n   *\r\n   * @param config Connection config\r\n   *\r\n   * @private\r\n   * @internal\r\n   */\r\n  async _connect(config: ConnectionOptions): Promise<TConnection> {\r\n    await this.sequelize.runHooks('beforeConnect', config);\r\n    const connection = await this.connect(config);\r\n    await this.sequelize.runHooks('afterConnect', connection, config);\r\n\r\n    return connection;\r\n  }\r\n\r\n  /**\r\n   * Call dialect library to disconnect a connection\r\n   *\r\n   * @param connection\r\n   * @private\r\n   */\r\n  async _disconnect(connection: TConnection) {\r\n    await this.sequelize.runHooks('beforeDisconnect', connection);\r\n    await this.disconnect(connection);\r\n    await this.sequelize.runHooks('afterDisconnect', connection);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["cloneDeep", "each", "semver"]
}
