{
  "version": 3,
  "sources": ["../../../src/dialects/db2/query-interface.js"],
  "sourcesContent": ["'use strict';\r\n\r\nimport { AggregateError, DatabaseError } from '../../errors';\r\nimport { assertNoReservedBind } from '../../utils/sql';\r\n\r\nconst _ = require('lodash');\r\nconst Utils = require('../../utils');\r\nconst { Op } = require('../../operators');\r\nconst { QueryInterface } = require('../abstract/query-interface');\r\nconst { QueryTypes } = require('../../query-types');\r\n\r\n/**\r\n * The interface that Sequelize uses to talk with Db2 database\r\n */\r\nexport class Db2QueryInterface extends QueryInterface {\r\n  async getForeignKeyReferencesForTable(tableName, options) {\r\n    const queryOptions = {\r\n      ...options,\r\n      type: QueryTypes.FOREIGNKEYS,\r\n    };\r\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.username.toUpperCase());\r\n\r\n    return this.sequelize.queryRaw(query, queryOptions);\r\n  }\r\n\r\n  async upsert(tableName, insertValues, updateValues, where, options) {\r\n    if (options.bind) {\r\n      assertNoReservedBind(options.bind);\r\n    }\r\n\r\n    options = { ...options };\r\n\r\n    const model = options.model;\r\n    const wheres = [];\r\n    const attributes = Object.keys(insertValues);\r\n    let indexFields;\r\n\r\n    options = _.clone(options);\r\n\r\n    if (!Utils.isWhereEmpty(where)) {\r\n      wheres.push(where);\r\n    }\r\n\r\n    // Lets combine unique keys and indexes into one\r\n    const indexes = _.map(model.uniqueKeys, value => {\r\n      return value.fields;\r\n    });\r\n\r\n    for (const value of model.getIndexes()) {\r\n      if (value.unique) {\r\n        // fields in the index may both the strings or objects with an attribute property - lets sanitize that\r\n        indexFields = value.fields.map(field => {\r\n          if (_.isPlainObject(field)) {\r\n            return field.attribute;\r\n          }\r\n\r\n          return field;\r\n        });\r\n        indexes.push(indexFields);\r\n      }\r\n    }\r\n\r\n    for (const index of indexes) {\r\n      if (_.intersection(attributes, index).length === index.length) {\r\n        where = {};\r\n        for (const field of index) {\r\n          where[field] = insertValues[field];\r\n        }\r\n\r\n        wheres.push(where);\r\n      }\r\n    }\r\n\r\n    where = { [Op.or]: wheres };\r\n\r\n    options.type = QueryTypes.UPSERT;\r\n    options.raw = true;\r\n\r\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\r\n\r\n    delete options.replacements;\r\n\r\n    const result = await this.sequelize.queryRaw(sql, options);\r\n\r\n    return [result, undefined];\r\n  }\r\n\r\n  async dropSchema(schema, options) {\r\n    const outParams = new Map();\r\n\r\n    // DROP SCHEMA works in a weird way in DB2:\r\n    // Its query uses ADMIN_DROP_SCHEMA, which stores the error message in a table\r\n    // specified by two IN-OUT parameters.\r\n    // If the returned values for these parameters is not null, then an error occurred.\r\n    const response = await super.dropSchema(schema, {\r\n      ...options,\r\n      // TODO: db2 supports out parameters. We don't have a proper API for it yet\r\n      //   for now, this temporary API will have to do.\r\n      _unsafe_db2Outparams: outParams,\r\n    });\r\n\r\n    const errorTable = outParams.get('sequelize_errorTable');\r\n    if (errorTable != null) {\r\n      const errorSchema = outParams.get('sequelize_errorSchema');\r\n\r\n      const errorData = await this.sequelize.queryRaw(`SELECT * FROM \"${errorSchema}\".\"${errorTable}\"`, {\r\n        type: QueryTypes.SELECT,\r\n      });\r\n\r\n      // replicate the data ibm_db adds on an error object\r\n      const error = new Error(errorData[0].DIAGTEXT);\r\n      error.sqlcode = errorData[0].SQLCODE;\r\n      error.sql = errorData[0].STATEMENT;\r\n      error.state = errorData[0].SQLSTATE;\r\n\r\n      const wrappedError = new DatabaseError(error);\r\n\r\n      try {\r\n        await this.dropTable({\r\n          tableName: errorTable,\r\n          schema: errorSchema,\r\n        });\r\n      } catch (dropError) {\r\n        throw new AggregateError([\r\n          wrappedError,\r\n          new Error(`An error occurred while cleaning up table ${errorSchema}.${errorTable}`, { cause: dropError }),\r\n        ]);\r\n      }\r\n\r\n      // -204 is \"name is undefined\" (schema does not exist)\r\n      // 'queryInterface.dropSchema' is supposed to be DROP SCHEMA IF EXISTS\r\n      // so we can ignore this error\r\n      if (error.sqlcode === -204 && error.state === '42704') {\r\n        return response;\r\n      }\r\n\r\n      throw wrappedError;\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  async createTable(tableName, attributes, options, model) {\r\n    let sql = '';\r\n\r\n    options = { ...options };\r\n\r\n    if (options && options.uniqueKeys) {\r\n      _.forOwn(options.uniqueKeys, uniqueKey => {\r\n        if (uniqueKey.customIndex === undefined) {\r\n          uniqueKey.customIndex = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (model) {\r\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\r\n    }\r\n\r\n    attributes = _.mapValues(\r\n      attributes,\r\n      attribute => this.sequelize.normalizeAttribute(attribute),\r\n    );\r\n\r\n    if (\r\n      !tableName.schema\r\n      && (options.schema || Boolean(model) && model._schema)\r\n    ) {\r\n      tableName = this.queryGenerator.addSchema({\r\n        tableName,\r\n        _schema: Boolean(model) && model._schema || options.schema,\r\n      });\r\n    }\r\n\r\n    attributes = this.queryGenerator.attributesToSQL(attributes, { table: tableName, context: 'createTable', withoutForeignKeyConstraints: options.withoutForeignKeyConstraints });\r\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\r\n\r\n    return await this.sequelize.queryRaw(sql, options);\r\n  }\r\n\r\n  async addConstraint(tableName, options) {\r\n    try {\r\n      return await super.addConstraint(tableName, options);\r\n    } catch (error) {\r\n      if (!error.cause) {\r\n        throw error;\r\n      }\r\n\r\n      // Operation not allowed for reason code \"7\" on table \"DB2INST1.users\".  SQLSTATE=57007\r\n      if (error.cause.sqlcode !== -668 || error.cause.state !== '57007') {\r\n        throw error;\r\n      }\r\n\r\n      // https://www.ibm.com/support/pages/how-verify-and-resolve-sql0668n-reason-code-7-when-accessing-table\r\n      await this.executeTableReorg(tableName);\r\n      await super.addConstraint(tableName, options);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * DB2 can put tables in the \"reorg pending\" state after a structure change (e.g. ALTER)\r\n   * Other changes cannot be done to these tables until the reorg has been completed.\r\n   *\r\n   * This method forces a reorg to happen now.\r\n   *\r\n   * @param {TableName} tableName - The name of the table to reorg\r\n   */\r\n  async executeTableReorg(tableName) {\r\n    // https://www.ibm.com/support/pages/sql0668n-operating-not-allowed-reason-code-7-seen-when-querying-or-viewing-table-db2-warehouse-cloud-and-db2-cloud\r\n    return await this.sequelize.query(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${this.queryGenerator.quoteTable(tableName)}')`);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
