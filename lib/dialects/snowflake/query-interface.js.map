{
  "version": 3,
  "sources": ["../../../src/dialects/snowflake/query-interface.js"],
  "sourcesContent": ["'use strict';\r\n\r\nimport { assertNoReservedBind, combineBinds } from '../../utils/sql';\r\n\r\nconst sequelizeErrors = require('../../errors');\r\nconst { QueryInterface } = require('../abstract/query-interface');\r\nconst { QueryTypes } = require('../../query-types');\r\n\r\n/**\r\n * The interface that Sequelize uses to talk with Snowflake database\r\n */\r\nexport class SnowflakeQueryInterface extends QueryInterface {\r\n  /**\r\n   * A wrapper that fixes Snowflake's inability to cleanly remove columns from existing tables if they have a foreign key\r\n   * constraint.\r\n   *\r\n   * @override\r\n   */\r\n  async removeColumn(tableName, columnName, options) {\r\n    options = options || {};\r\n\r\n    const [results] = await this.sequelize.queryRaw(\r\n      this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\r\n        tableName,\r\n        schema: this.sequelize.config.database,\r\n      }, columnName),\r\n      { raw: true, ...options },\r\n    );\r\n\r\n    // Exclude primary key constraint\r\n    if (results.length > 0 && results[0].constraint_name !== 'PRIMARY') {\r\n      await Promise.all(results.map(constraint => this.sequelize.queryRaw(\r\n        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name),\r\n        { raw: true, ...options },\r\n      )));\r\n    }\r\n\r\n    return await this.sequelize.queryRaw(\r\n      this.queryGenerator.removeColumnQuery(tableName, columnName),\r\n      { raw: true, ...options },\r\n    );\r\n  }\r\n\r\n  /** @override */\r\n  async upsert(tableName, insertValues, updateValues, where, options) {\r\n    if (options.bind) {\r\n      assertNoReservedBind(options.bind);\r\n    }\r\n\r\n    options = { ...options };\r\n\r\n    options.type = QueryTypes.UPSERT;\r\n    options.updateOnDuplicate = Object.keys(updateValues);\r\n\r\n    const model = options.model;\r\n    const { query, bind } = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\r\n\r\n    delete options.replacements;\r\n    options.bind = combineBinds(options.bind, bind);\r\n\r\n    return await this.sequelize.queryRaw(query, options);\r\n  }\r\n\r\n  /** @override */\r\n  async removeConstraint(tableName, constraintName, options) {\r\n    const sql = this.queryGenerator.showConstraintsQuery(\r\n      tableName.tableName ? tableName : {\r\n        tableName,\r\n        schema: this.sequelize.config.database,\r\n      }, constraintName,\r\n    );\r\n\r\n    const constraints = await this.sequelize.queryRaw(sql, {\r\n      ...options,\r\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS,\r\n    });\r\n\r\n    const constraint = constraints[0];\r\n    let query;\r\n    if (!constraint || !constraint.constraintType) {\r\n      throw new sequelizeErrors.UnknownConstraintError(\r\n        {\r\n          message: `Constraint ${constraintName} on table ${tableName} does not exist`,\r\n          constraint: constraintName,\r\n          table: tableName,\r\n        },\r\n      );\r\n    }\r\n\r\n    if (constraint.constraintType === 'FOREIGN KEY') {\r\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\r\n    } else {\r\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\r\n    }\r\n\r\n    return await this.sequelize.queryRaw(query, options);\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,iBAAmD;AAEnD,MAAM,kBAAkB,QAAQ,cAAc;AAC9C,MAAM,EAAE,eAAe,IAAI,QAAQ,6BAA6B;AAChE,MAAM,EAAE,WAAW,IAAI,QAAQ,mBAAmB;AAK3C,MAAM,gCAAgC,eAAe;AAAA,EAO1D,MAAM,aAAa,WAAW,YAAY,SAAS;AACjD,cAAU,WAAW,CAAC;AAEtB,UAAM,CAAC,OAAO,IAAI,MAAM,KAAK,UAAU;AAAA,MACrC,KAAK,eAAe,mBAAmB,UAAU,YAAY,YAAY;AAAA,QACvE;AAAA,QACA,QAAQ,KAAK,UAAU,OAAO;AAAA,MAChC,GAAG,UAAU;AAAA,MACb,EAAE,KAAK,MAAM,GAAG,QAAQ;AAAA,IAC1B;AAGA,QAAI,QAAQ,SAAS,KAAK,QAAQ,GAAG,oBAAoB,WAAW;AAClE,YAAM,QAAQ,IAAI,QAAQ,IAAI,gBAAc,KAAK,UAAU;AAAA,QACzD,KAAK,eAAe,oBAAoB,WAAW,WAAW,eAAe;AAAA,QAC7E,EAAE,KAAK,MAAM,GAAG,QAAQ;AAAA,MAC1B,CAAC,CAAC;AAAA,IACJ;AAEA,WAAO,MAAM,KAAK,UAAU;AAAA,MAC1B,KAAK,eAAe,kBAAkB,WAAW,UAAU;AAAA,MAC3D,EAAE,KAAK,MAAM,GAAG,QAAQ;AAAA,IAC1B;AAAA,EACF;AAAA,EAGA,MAAM,OAAO,WAAW,cAAc,cAAc,OAAO,SAAS;AAClE,QAAI,QAAQ,MAAM;AAChB,2CAAqB,QAAQ,IAAI;AAAA,IACnC;AAEA,cAAU,EAAE,GAAG,QAAQ;AAEvB,YAAQ,OAAO,WAAW;AAC1B,YAAQ,oBAAoB,OAAO,KAAK,YAAY;AAEpD,UAAM,QAAQ,QAAQ;AACtB,UAAM,EAAE,OAAO,KAAK,IAAI,KAAK,eAAe,YAAY,WAAW,cAAc,MAAM,eAAe,OAAO;AAE7G,WAAO,QAAQ;AACf,YAAQ,WAAO,yBAAa,QAAQ,MAAM,IAAI;AAE9C,WAAO,MAAM,KAAK,UAAU,SAAS,OAAO,OAAO;AAAA,EACrD;AAAA,EAGA,MAAM,iBAAiB,WAAW,gBAAgB,SAAS;AACzD,UAAM,MAAM,KAAK,eAAe;AAAA,MAC9B,UAAU,YAAY,YAAY;AAAA,QAChC;AAAA,QACA,QAAQ,KAAK,UAAU,OAAO;AAAA,MAChC;AAAA,MAAG;AAAA,IACL;AAEA,UAAM,cAAc,MAAM,KAAK,UAAU,SAAS,KAAK;AAAA,MACrD,GAAG;AAAA,MACH,MAAM,KAAK,UAAU,WAAW;AAAA,IAClC,CAAC;AAED,UAAM,aAAa,YAAY;AAC/B,QAAI;AACJ,QAAI,CAAC,cAAc,CAAC,WAAW,gBAAgB;AAC7C,YAAM,IAAI,gBAAgB;AAAA,QACxB;AAAA,UACE,SAAS,cAAc,2BAA2B;AAAA,UAClD,YAAY;AAAA,UACZ,OAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAEA,QAAI,WAAW,mBAAmB,eAAe;AAC/C,cAAQ,KAAK,eAAe,oBAAoB,WAAW,cAAc;AAAA,IAC3E,OAAO;AACL,cAAQ,KAAK,eAAe,iBAAiB,WAAW,WAAW,WAAW,cAAc;AAAA,IAC9F;AAEA,WAAO,MAAM,KAAK,UAAU,SAAS,OAAO,OAAO;AAAA,EACrD;AACF;",
  "names": []
}
