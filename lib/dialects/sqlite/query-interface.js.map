{
  "version": 3,
  "sources": ["../../../src/dialects/sqlite/query-interface.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst sequelizeErrors = require('../../errors');\r\nconst { QueryTypes } = require('../../query-types');\r\nconst { QueryInterface, QueryOptions, ColumnsDescription } = require('../abstract/query-interface');\r\nconst { cloneDeep } = require('../../utils');\r\nconst _ = require('lodash');\r\nconst uuid = require('uuid').v4;\r\n\r\n/**\r\n * The interface that Sequelize uses to talk with SQLite database\r\n */\r\nexport class SqliteQueryInterface extends QueryInterface {\r\n  /**\r\n   * A wrapper that fixes SQLite's inability to remove columns from existing tables.\r\n   * It will create a backup of the table, drop the table afterwards and create a\r\n   * new table with the same name but without the obsolete column.\r\n   *\r\n   * @override\r\n   */\r\n  async removeColumn(tableName, attributeName, options) {\r\n    options = options || {};\r\n\r\n    const fields = await this.describeTable(tableName, options);\r\n    delete fields[attributeName];\r\n\r\n    return this.alterTableInternal(tableName, fields, options);\r\n  }\r\n\r\n  /**\r\n   * A wrapper that fixes SQLite's inability to change columns from existing tables.\r\n   * It will create a backup of the table, drop the table afterwards and create a\r\n   * new table with the same name but with a modified version of the respective column.\r\n   *\r\n   * @override\r\n   */\r\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\r\n    options = options || {};\r\n\r\n    const fields = await this.describeTable(tableName, options);\r\n    Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\r\n\r\n    return this.alterTableInternal(tableName, fields, options);\r\n  }\r\n\r\n  /**\r\n   * A wrapper that fixes SQLite's inability to rename columns from existing tables.\r\n   * It will create a backup of the table, drop the table afterwards and create a\r\n   * new table with the same name but with a renamed version of the respective column.\r\n   *\r\n   * @override\r\n   */\r\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\r\n    options = options || {};\r\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\r\n\r\n    fields[attrNameAfter] = { ...fields[attrNameBefore] };\r\n    delete fields[attrNameBefore];\r\n\r\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\r\n    const subQueries = sql.split(';').filter(q => q !== '');\r\n\r\n    for (const subQuery of subQueries) {\r\n      await this.sequelize.queryRaw(`${subQuery};`, { raw: true, ...options });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  async removeConstraint(tableName, constraintName, options) {\r\n    let createTableSql;\r\n\r\n    const constraints = await this.showConstraint(tableName, constraintName);\r\n    // sqlite can't show only one constraint, so we find here the one to remove\r\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\r\n\r\n    if (!constraint) {\r\n      throw new sequelizeErrors.UnknownConstraintError({\r\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\r\n        constraint: constraintName,\r\n        table: tableName,\r\n      });\r\n    }\r\n\r\n    createTableSql = constraint.sql;\r\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\r\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\r\n\r\n    if (constraint.constraintType === 'FOREIGN KEY') {\r\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\r\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.queryGenerator.quoteIdentifier(columnName));\r\n      const referenceTableKeys = constraint.referenceTableKeys.join(', ');\r\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\r\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\r\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\r\n    }\r\n\r\n    createTableSql = createTableSql.replace(constraintSnippet, '');\r\n    createTableSql += ';';\r\n\r\n    const fields = await this.describeTable(tableName, options);\r\n\r\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\r\n    const subQueries = sql.split(';').filter(q => q !== '');\r\n\r\n    for (const subQuery of subQueries) {\r\n      await this.sequelize.queryRaw(`${subQuery};`, { raw: true, ...options });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  async addConstraint(tableName, options) {\r\n    if (!options.fields) {\r\n      throw new Error('Fields must be specified through options.fields');\r\n    }\r\n\r\n    if (!options.type) {\r\n      throw new Error('Constraint type must be specified through options.type');\r\n    }\r\n\r\n    options = cloneDeep(options);\r\n\r\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\r\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\r\n\r\n    const constraints = await this.sequelize.queryRaw(describeCreateTableSql, { ...options, type: QueryTypes.SELECT, raw: true });\r\n    let sql = constraints[0].sql;\r\n    const index = sql.length - 1;\r\n    // Replace ending ')' with constraint snippet - Simulates String.replaceAt\r\n    // http://stackoverflow.com/questions/1431094\r\n    const createTableSql = `${sql.slice(0, Math.max(0, index))}, ${constraintSnippet})${sql.slice(index + 1)};`;\r\n\r\n    const fields = await this.describeTable(tableName, options);\r\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\r\n    const subQueries = sql.split(';').filter(q => q !== '');\r\n\r\n    for (const subQuery of subQueries) {\r\n      await this.sequelize.queryRaw(`${subQuery};`, { raw: true, ...options });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  async getForeignKeyReferencesForTable(tableName, options) {\r\n    const database = this.sequelize.config.database;\r\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, database);\r\n    const result = await this.sequelize.queryRaw(query, options);\r\n\r\n    return result.map(row => ({\r\n      tableName,\r\n      columnName: row.from,\r\n      referencedTableName: row.table,\r\n      referencedColumnName: row.to,\r\n      tableCatalog: database,\r\n      referencedTableCatalog: database,\r\n      constraints: {\r\n        onUpdate: row.on_update,\r\n        onDelete: row.on_delete,\r\n      },\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  async dropAllTables(options) {\r\n    options = options || {};\r\n    const skip = options.skip || [];\r\n\r\n    const tableNames = await this.showAllTables(options);\r\n    await this.sequelize.queryRaw('PRAGMA foreign_keys = OFF', options);\r\n    await this._dropAllTables(tableNames, skip, options);\r\n    await this.sequelize.queryRaw('PRAGMA foreign_keys = ON', options);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  async describeTable(tableName, options) {\r\n    let schema = null;\r\n    let schemaDelimiter = null;\r\n\r\n    if (typeof options === 'string') {\r\n      schema = options;\r\n    } else if (typeof options === 'object' && options !== null) {\r\n      schema = options.schema || null;\r\n      schemaDelimiter = options.schemaDelimiter || null;\r\n    }\r\n\r\n    if (typeof tableName === 'object' && tableName !== null) {\r\n      schema = tableName.schema;\r\n      tableName = tableName.tableName;\r\n    }\r\n\r\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\r\n    options = { ...options, type: QueryTypes.DESCRIBE };\r\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\r\n\r\n    try {\r\n      const data = await this.sequelize.queryRaw(sql, options);\r\n      /*\r\n       * If no data is returned from the query, then the table name may be wrong.\r\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\r\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\r\n       */\r\n      if (_.isEmpty(data)) {\r\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\r\n      }\r\n\r\n      const indexes = await this.sequelize.queryRaw(sqlIndexes, options);\r\n      for (const prop in data) {\r\n        data[prop].unique = false;\r\n      }\r\n\r\n      for (const index of indexes) {\r\n        for (const field of index.fields) {\r\n          if (index.unique !== undefined) {\r\n            data[field.attribute].unique = index.unique;\r\n          }\r\n        }\r\n      }\r\n\r\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\r\n      for (const foreignKey of foreignKeys) {\r\n        data[foreignKey.columnName].references = {\r\n          model: foreignKey.referencedTableName,\r\n          key: foreignKey.referencedColumnName,\r\n        };\r\n\r\n        // Add constraints to column definition\r\n        Object.assign(data[foreignKey.columnName], {\r\n          onUpdate: foreignKey.constraints.onUpdate,\r\n          onDelete: foreignKey.constraints.onDelete,\r\n        });\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      if (error.original && error.original.code === 'ER_NO_SUCH_TABLE') {\r\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Alters a table in sqlite.\r\n   * Workaround for sqlite's limited alter table support.\r\n   *\r\n   * @param {string} tableName - The table's name\r\n   * @param {ColumnsDescription} fields - The table's description\r\n   * @param {QueryOptions} options - Query options\r\n   * @private\r\n   */\r\n  async alterTableInternal(tableName, fields, options) {\r\n    return this.withForeignKeysOff(options, async () => {\r\n      const savepointName = this.getSavepointName();\r\n      await this.sequelize.query(`SAVEPOINT ${savepointName};`, options);\r\n\r\n      try {\r\n        const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\r\n        const subQueries = sql.split(';').filter(q => q !== '');\r\n\r\n        for (const subQuery of subQueries) {\r\n          await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\r\n        }\r\n\r\n        // Run a foreign keys integrity check\r\n        const foreignKeyCheckResult = await this.sequelize.query(this.queryGenerator.foreignKeyCheckQuery(tableName), {\r\n          ...options,\r\n          type: QueryTypes.SELECT,\r\n        });\r\n\r\n        if (foreignKeyCheckResult.length > 0) {\r\n          // There are foreign key violations, exit\r\n          throw new sequelizeErrors.ForeignKeyConstraintError({\r\n            message: `Foreign key violations detected: ${JSON.stringify(foreignKeyCheckResult, null, 2)}`,\r\n            table: tableName,\r\n          });\r\n        }\r\n\r\n        await this.sequelize.query(`RELEASE ${savepointName};`, options);\r\n      } catch (error) {\r\n        await this.sequelize.query(`ROLLBACK TO ${savepointName};`, options);\r\n        throw error;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Runs the provided callback with foreign keys disabled.\r\n   *\r\n   * @param {QueryOptions} [options]\r\n   * @param {Function<Promise<any>>} cb\r\n   * @private\r\n   */\r\n  async withForeignKeysOff(options, cb) {\r\n    await this.sequelize.query('PRAGMA foreign_keys = OFF;', options);\r\n\r\n    try {\r\n      return await cb();\r\n    } finally {\r\n      await this.sequelize.query('PRAGMA foreign_keys = ON;', options);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a randomly generated savepoint name\r\n   *\r\n   * @param {string} prefix\r\n   * @returns {string}\r\n   */\r\n  getSavepointName(prefix = 'sequelize') {\r\n    // sqlite does not support \"-\" (dashes) in transaction's name\r\n    const suffix = uuid().replace(/-/g, '_');\r\n\r\n    return `${prefix}_${suffix}`;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
